import networkx as nx,time,random
num_nodes = 6
G = nx.Graph()

edge = [(0, 1, 10), (0, 2, 20), (0, 3, 30),(1, 4, 40), (1, 5, 50),(2, 4, 10), (2, 5, 60),(3, 5, 30),(4, 5, 20)]
G.add_weighted_edges_from(edge)
h = {0: 20, 1: 15, 2: 10, 3: 5, 4: 25, 5: 0}
def heuristic(u, v):
    return h[u]


start= 0
goal = 5

start_time = time.time()
astar_path = nx.astar_path(G, start, goal, heuristic=heuristic)
end_time = time.time()
astar_time = end_time - start_time

start_time = time.time()
greedy_path = nx.astar_path(G, start, goal, heuristic=lambda u, v: h[u], weight=None)
end_time = time.time()
greedy_time = end_time - start_time

print("A* Path:", astar_path)
print("Time taken for A* search:" ,astar_time)

print("Greedy Path:", greedy_path)
