from heapq import heappop, heappush

def a_star_search(graph, start, goal, heuristic):
    open_list = []
    heappush(open_list, (0, start))
    came_from = {}
    g_score = {start: 0}
    f_score = {start: heuristic[start]}
    
    while open_list:
        current = heappop(open_list)[1]
        
        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            return path[::-1]
        
        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost
            if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = tentative_g_score + heuristic[neighbor]
                heappush(open_list, (f_score[neighbor], neighbor))
    
    return None

# Example usage:
graph = {
    'A': {'B': 1, 'C': 3},
    'B': {'A': 1, 'D': 1, 'E': 5},
    'C': {'A': 3, 'F': 2},
    'D': {'B': 1, 'E': 1},
    'E': {'B': 5, 'D': 1, 'G': 2},
    'F': {'C': 2, 'G': 1},
    'G': {'E': 2, 'F': 1}
}
heuristic = {
    'A': 7, 'B': 6, 'C': 2, 'D': 1, 'E': 0, 'F': 1, 'G': 0
}

start = 'A'
goal = 'G'
path = a_star_search(graph, start, goal, heuristic)
print("Path found:", path)
